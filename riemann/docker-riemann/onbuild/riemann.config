; -*- mode: clojure; -*-
; vim: filetype=clojure
(use 'riemann.slack)

(load-plugins)
(require '[org.spootnik.riemann.thresholds :refer [threshold-check]])

(logging/init {:file "/var/logs/riemann/riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 10)

;The following code is based on the code sample in this pull request comment on Github:
; https://github.com/aphyr/riemann/issues/411#issue-36716498

(require '[riemann.common :refer [event]])
(require 'capacitor.core)
(require 'capacitor.async)
(require 'clojure.core.async)

(def slack-webhook-uri "slack URL")

(def sidebar-color {"ok" "good" "expired" "warning" "error" "danger"})

(def slack-webhook-uri)
(def sl (slack {:webhook_uri slack-webhook-uri} {:icon ":computer:"
                                                           :formatter (fn [e]
                                                              {:attachments [{:color (sidebar-color "Alert")
                                                                              :text (str "*" (:service e) "*" ": "
                                                                                         (clojure.string/upper-case (:metric e))
                                                                                         "\n" "warning")
                                                                              :mrkdwn_in [:text]}]})}))



(let [index (index)]
  (streams
   (default :ttl 60
   index
    (where (service "statsd/derive-request")
      (where (>= metric 2)
          sl))

    (where (service "statsd/derive-dave")
       (where (>= metric 2)
          sl)))))
